Accepts users input and then logs the user inside of the console.
Ask first for the username & password. After a succesfull request, ask the user for the UID. The UID will be inside the response from the server, if the username&password registration was succesfull.
After the complete registration, the user will be able to get all the data & communicate with the server

**************** HEADER, BODY AND RESPONSE STYLE ****************

Whenever the client sends data to the server we will insert a header in front of the information given from the user

{HEADER}{BODY}

The user will never be able to use [] inside the messages sent to the server in order to make sure that we can separate the header from the body. 

Inside the body we will have data given from the user. It's like an HTTP/HTTPS get request.

POSSIBLE HEADER VALUES & RESPONSES FROM THE SERVER:

-------------------------------------------------------------------- LOGIN --------------------------------------------------------------------

{CLIENT_LOGIN_INFO_USERNAME_PASSWORD} -> Used when the client is logging in with the username and password
Body structure : {USERNAME:{0}|PASSWORD:{1}}
RESPONSE FROM THE SERVER:
Successful:
SERVER_LOGIN_INFO_USERNAME_PASSWORD_SUCCESSFUL_<UID>
Username or password wrong:
SERVER_LOGIN_INFO_USERNAME_PASSWORD_WRONG

If the UID is given in correctly by the user from the client:
{CLIENT_LOGIN_INFO_UID_SUCCESSFUL} -> Used when the client is logging in with the UID, after a successfull username & password response
Body structure : {UID:{0}}
RESPONSE FROM THE SERVER ( The body in this case will look like a dict in python, returned as a string from the server it will be eval-ed inside the client. This will make it easier to create the user object that will be bound to a certain client ):
{SERVER_LOGIN_INFO_UID_SUCCESSFULL}{UID:<UID>,Username:<>,Password:<>,FirstName:<>,...}

If the UID given by the user inside the client is not valid:
{CLIENT_LOGIN_INFO_UID_NOT_VALID}

-------------------------------------------------------------------- LOGIN --------------------------------------------------------------------
-------------------------------------------------------------------- REGISTER --------------------------------------------------------------------

CLIENT : {CLIENT_REGISTER_DATA}{USERNAME:{0}|PASSWORD:{1}, ...}
SERVER:
1. {SERVER_REGISTER_INFO_ERROR} -- Send this when something went wrong when trying to add a new user to the database
2. {SERVER_REGISTER_INFO_SUCCESSFUL} -- Send this when the server has successfully added a new user to the database

-------------------------------------------------------------------- REGISTER --------------------------------------------------------------------
-------------------------------------------------------------------- COMMUNICATION --------------------------------------------------------------------
-- When the client wants to start communicating with other clients, it will create a non blocking client socket that will bind to the server.
That non blocking client socket must send a message to the server, with the Username, so the server can save the username and the address of the client socket inside a dictionary.

CLIENT : {CLIENT_COMMUNICATION_DATA}{<USERNAME>}

-- When the client wants to send data to the server:

CLIENT : {CLIENT_MESSAGE}{<SENDER_USERNAME>_<RECEIVER_USERNAME>_<MESSAGE>}


In case that the username doesn't exist:
SERVER : {CLIENT_MESSAGE_ERROR_USERNAME_NOT_FOUND}

-- When the client gets a message:
SERVER : {MESSAGE_FROM_CLIENT}{<Sender_username>_<message>;<Receiver_Addr>}

-------------------------------------------------------------------- COMMUNICATION --------------------------------------------------------------------

**************** HEADER, BODY AND RESPONSE STYLE ****************